!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
Append	data.go	/^func (t Table) Append(items ...interface{}) {$/;"	f	unknown:data.Table
Append	slicefloat32.go	/^func (s *SliceFloat32) Append(t interface{}) {$/;"	f	unknown:data.SliceFloat32
Append	sliceint.go	/^func (s *SliceInt) Append(t interface{}) {$/;"	f	unknown:data.SliceInt
BenchmarkTableDelete	test/tablebenchmark_test.go	/^func BenchmarkTableDelete(b *testing.B) {$/;"	f	package:dataTest
BenchmarkTableLen	test/tablebenchmark_test.go	/^func BenchmarkTableLen(b *testing.B) {$/;"	f	package:dataTest
BenchmarkTableSwap	test/tablebenchmark_test.go	/^func BenchmarkTableSwap(b *testing.B) {$/;"	f	package:dataTest
Delete	data.go	/^func (t Table) Delete(i int) {$/;"	f	unknown:data.Table
Delete	slicefloat32.go	/^func (s *SliceFloat32) Delete(i int) {$/;"	f	unknown:data.SliceFloat32
Delete	sliceint.go	/^func (s *SliceInt) Delete(i int) {$/;"	f	unknown:data.SliceInt
Filter	data.go	/^func (t Table) Filter(f func(int) bool) {$/;"	f	unknown:data.Table
Len	data.go	/^func (t Table) Len() int {$/;"	f	unknown:data.Table	typeref:typename:int
Len	slicefloat32.go	/^func (s *SliceFloat32) Len() int {$/;"	f	unknown:data.SliceFloat32	typeref:typename:int
Len	sliceint.go	/^func (s *SliceInt) Len() int {$/;"	f	unknown:data.SliceInt	typeref:typename:int
Slice	data.go	/^type Slice interface{$/;"	i	package:data
SliceFloat32	slicefloat32.go	/^type SliceFloat32 []float32$/;"	t	package:data
SliceInt	sliceint.go	/^type SliceInt []int$/;"	t	package:data
Swap	data.go	/^func (t Table) Swap(i, j int) {$/;"	f	unknown:data.Table
Swap	slicefloat32.go	/^func (s *SliceFloat32) Swap(i, j int) {$/;"	f	unknown:data.SliceFloat32
Swap	sliceint.go	/^func (s *SliceInt) Swap(i, j int) {$/;"	f	unknown:data.SliceInt
Table	data.go	/^type Table []Slice$/;"	t	package:data
TestSliceFloat32Append	test/slicefloat32_test.go	/^func TestSliceFloat32Append(t *testing.T) {$/;"	f	package:dataTest
TestSliceFloat32Delete	test/slicefloat32_test.go	/^func TestSliceFloat32Delete(t *testing.T) {$/;"	f	package:dataTest
TestSliceFloat32Identical	test/slicefloat32_test.go	/^func TestSliceFloat32Identical(t *testing.T) {$/;"	f	package:dataTest
TestSliceFloat32Len	test/slicefloat32_test.go	/^func TestSliceFloat32Len(t *testing.T) {$/;"	f	package:dataTest
TestSliceFloat32Swap	test/slicefloat32_test.go	/^func TestSliceFloat32Swap(t *testing.T) {$/;"	f	package:dataTest
TestSliceIntDelete	test/sliceint_test.go	/^func TestSliceIntDelete(t *testing.T) {$/;"	f	package:dataTest
TestSliceIntIdentical	test/sliceint_test.go	/^func TestSliceIntIdentical(t *testing.T) {$/;"	f	package:dataTest
TestSliceIntLen	test/sliceint_test.go	/^func TestSliceIntLen(t *testing.T) {$/;"	f	package:dataTest
TestSliceIntSwap	test/sliceint_test.go	/^func TestSliceIntSwap(t *testing.T) {$/;"	f	package:dataTest
TestTableDelete	test/table_test.go	/^func TestTableDelete(t *testing.T) {$/;"	f	package:dataTest
TestTableIdentical	test/table_test.go	/^func TestTableIdentical(t *testing.T) {$/;"	f	package:dataTest
TestTableLen	test/table_test.go	/^func TestTableLen(t *testing.T) {$/;"	f	package:dataTest
TestTableSwap	test/table_test.go	/^func TestTableSwap(t *testing.T) {$/;"	f	package:dataTest
data	data.go	/^package data$/;"	p
data	slicefloat32.go	/^package data$/;"	p
data	sliceint.go	/^package data$/;"	p
dataTest	test/slicefloat32_test.go	/^package dataTest$/;"	p
dataTest	test/sliceint_test.go	/^package dataTest$/;"	p
dataTest	test/table_test.go	/^package dataTest$/;"	p
dataTest	test/tablebenchmark_test.go	/^package dataTest$/;"	p
sliceFloat32Identical	test/slicefloat32_test.go	/^func sliceFloat32Identical(a, b data.SliceFloat32) bool {$/;"	f	package:dataTest	typeref:typename:bool
sliceIntIdentical	test/sliceint_test.go	/^func sliceIntIdentical(a, b data.SliceInt) bool {$/;"	f	package:dataTest	typeref:typename:bool
tableIdentical	test/table_test.go	/^func tableIdentical(a, b Table) bool {$/;"	f	package:dataTest	typeref:typename:bool
